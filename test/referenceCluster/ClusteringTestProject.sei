[
	[
		[
			example.crosscuttingConcern.LoadableData
			example.crosscuttingConcern.LoadableData.<init>() : void
			example.crosscuttingConcern.LoadableData.state
			example.crosscuttingConcern.MultiuseData
			example.crosscuttingConcern.MultiuseData.<init>() : void
			example.crosscuttingConcern.MultiuseData.state
			example.crosscuttingConcern.RowData
			example.crosscuttingConcern.RowData.<init>() : void
			example.crosscuttingConcern.StorableData
			example.crosscuttingConcern.StorableData.<init>() : void
			example.crosscuttingConcern.StorableData.state
			[
				example.crosscuttingConcern.Loadable
				example.crosscuttingConcern.Loadable.load() : void
				example.crosscuttingConcern.LoadableData.load() : void
				example.crosscuttingConcern.MultiuseData.load() : void
				example.crosscuttingConcern.RowData.load() : void
			]
			[
				example.crosscuttingConcern.Storable
				example.crosscuttingConcern.Storable.store() : void
				example.crosscuttingConcern.StorableData.store() : void
				example.crosscuttingConcern.MultiuseData.store() : void
				example.crosscuttingConcern.RowData.store() : void
			]
		]
		[
			[
				example.mixedConcern.HungryClient
				example.mixedConcern.HungryClient.<init>(example.mixedConcern.Restaurant) : void
				example.mixedConcern.HungryClient.eatPizza() : void
				example.mixedConcern.HungryClient.eatSteak() : void
				example.mixedConcern.HungryClient.restaurant
				example.mixedConcern.Restaurant.orderPizza() : void
				example.mixedConcern.Restaurant.orderSteak() : void
			]
			[
				example.mixedConcern.Restaurant
				example.mixedConcern.Restaurant.<init>() : void
			]
			[
				example.mixedConcern.ThirstyClient
				example.mixedConcern.ThirstyClient.<init>(example.mixedConcern.Restaurant) : void
				example.mixedConcern.ThirstyClient.drinkWater() : void
				example.mixedConcern.ThirstyClient.drinkCoke() : void
				example.mixedConcern.ThirstyClient.restaurant
				example.mixedConcern.Restaurant.orderCoke() : void
				example.mixedConcern.Restaurant.orderWater() : void
			]
		]
		[
			pattern.abstractFactory.App
			pattern.abstractFactory.App.<init>(pattern.abstractFactory.GUIFactory) : void
			pattern.abstractFactory.GTKGUIFactory
			pattern.abstractFactory.GTKGUIFactory.<init>() : void
			pattern.abstractFactory.GTKGUIFactory.createMenu() : pattern.abstractFactory.Menu
			pattern.abstractFactory.GTKGUIFactory.createWindow() : pattern.abstractFactory.Window
			pattern.abstractFactory.GTKMenu
			pattern.abstractFactory.GTKMenu.<init>() : void
			pattern.abstractFactory.GTKMenu.show() : void
			pattern.abstractFactory.GTKWindow
			pattern.abstractFactory.GTKWindow.<init>() : void
			pattern.abstractFactory.GTKWindow.show() : void
			pattern.abstractFactory.GUIFactory
			pattern.abstractFactory.GUIFactory.createMenu() : pattern.abstractFactory.Menu
			pattern.abstractFactory.GUIFactory.createWindow() : pattern.abstractFactory.Window
			pattern.abstractFactory.Menu
			pattern.abstractFactory.Menu.show() : void
			pattern.abstractFactory.QtGUIFactory
			pattern.abstractFactory.QtGUIFactory.<init>() : void
			pattern.abstractFactory.QtGUIFactory.createMenu() : pattern.abstractFactory.Menu
			pattern.abstractFactory.QtGUIFactory.createWindow() : pattern.abstractFactory.Window
			pattern.abstractFactory.QtMenu
			pattern.abstractFactory.QtMenu.<init>() : void
			pattern.abstractFactory.QtMenu.show() : void
			pattern.abstractFactory.QtWindow
			pattern.abstractFactory.QtWindow.<init>() : void
			pattern.abstractFactory.QtWindow.show() : void
			pattern.abstractFactory.Window
			pattern.abstractFactory.Window.show() : void
		]
		[
			pattern.abstractFactory2.Application
			pattern.abstractFactory2.Application.<init>(pattern.abstractFactory2.GUIFactory) : void
			pattern.abstractFactory2.ApplicationRunner
			pattern.abstractFactory2.ApplicationRunner.<init>() : void
			pattern.abstractFactory2.ApplicationRunner.createOsSpecificFactory() : pattern.abstractFactory2.GUIFactory
			pattern.abstractFactory2.ApplicationRunner.main(java.lang.String[]) : void
			pattern.abstractFactory2.Button
			pattern.abstractFactory2.Button.paint() : void
			pattern.abstractFactory2.GUIFactory
			pattern.abstractFactory2.GUIFactory.createButton() : pattern.abstractFactory2.Button
			pattern.abstractFactory2.OSXButton
			pattern.abstractFactory2.OSXButton.<init>() : void
			pattern.abstractFactory2.OSXButton.paint() : void
			pattern.abstractFactory2.OSXFactory
			pattern.abstractFactory2.OSXFactory.<init>() : void
			pattern.abstractFactory2.OSXFactory.createButton() : pattern.abstractFactory2.Button
			pattern.abstractFactory2.WinButton
			pattern.abstractFactory2.WinButton.<init>() : void
			pattern.abstractFactory2.WinButton.paint() : void
			pattern.abstractFactory2.WinFactory
			pattern.abstractFactory2.WinFactory.<init>() : void
			pattern.abstractFactory2.WinFactory.createButton() : pattern.abstractFactory2.Button
		]
		[
			pattern.abstractFactory3.Application
			pattern.abstractFactory3.Application.<init>(pattern.abstractFactory3.GUIFactory) : void
			pattern.abstractFactory3.ApplicationRunner
			pattern.abstractFactory3.ApplicationRunner.<init>() : void
			pattern.abstractFactory3.ApplicationRunner.createOsSpecificFactory() : pattern.abstractFactory3.GUIFactory
			pattern.abstractFactory3.ApplicationRunner.main(java.lang.String[]) : void
			pattern.abstractFactory3.Button
			pattern.abstractFactory3.Button.paint() : void
			pattern.abstractFactory3.GUIElement
			pattern.abstractFactory3.GUIElement.paint() : void
			pattern.abstractFactory3.GUIFactory
			pattern.abstractFactory3.GUIFactory.createButton() : pattern.abstractFactory3.Button
			pattern.abstractFactory3.GUIFactory.createMenu() : pattern.abstractFactory3.Menu
			pattern.abstractFactory3.Menu
			pattern.abstractFactory3.OSXButton
			pattern.abstractFactory3.OSXButton.<init>() : void
			pattern.abstractFactory3.OSXButton.paint() : void
			pattern.abstractFactory3.OSXFactory
			pattern.abstractFactory3.OSXFactory.<init>() : void
			pattern.abstractFactory3.OSXFactory.createButton() : pattern.abstractFactory3.Button
			pattern.abstractFactory3.OSXFactory.createMenu() : pattern.abstractFactory3.Menu
			pattern.abstractFactory3.OSXMenu
			pattern.abstractFactory3.OSXMenu.<init>() : void
			pattern.abstractFactory3.OSXMenu.paint() : void
			pattern.abstractFactory3.WinButton
			pattern.abstractFactory3.WinButton.<init>() : void
			pattern.abstractFactory3.WinButton.paint() : void
			pattern.abstractFactory3.WinFactory
			pattern.abstractFactory3.WinFactory.<init>() : void
			pattern.abstractFactory3.WinFactory.createButton() : pattern.abstractFactory3.Button
			pattern.abstractFactory3.WinFactory.createMenu() : pattern.abstractFactory3.Menu
			pattern.abstractFactory3.WinMenu
			pattern.abstractFactory3.WinMenu.<init>() : void
			pattern.abstractFactory3.WinMenu.paint() : void
		]
		[
			pattern.adapter.AdapteeClass
			pattern.adapter.AdapteeClass.<init>() : void
			pattern.adapter.AdapteeClass.adapteeClassMethod() : void
			pattern.adapter.AdapteeClassToClientInterfaceAdapter
			pattern.adapter.AdapteeClassToClientInterfaceAdapter.<init>(pattern.adapter.AdapteeClass) : void
			pattern.adapter.AdapteeClassToClientInterfaceAdapter.clientClassMethod() : void
			pattern.adapter.AdapteeClassToClientInterfaceAdapter.mInstance
			pattern.adapter.ClientInterface
			pattern.adapter.ClientInterface.clientClassMethod() : void
		]
		[
			pattern.bridge.BridgePattern
			pattern.bridge.BridgePattern.<init>() : void
			pattern.bridge.BridgePattern.main(java.lang.String[]) : void
			pattern.bridge.CircleShape
			pattern.bridge.CircleShape.<init>(double, double, double, pattern.bridge.DrawingAPI) : void
			pattern.bridge.CircleShape.draw() : void
			pattern.bridge.CircleShape.drawingAPI
			pattern.bridge.CircleShape.radius
			pattern.bridge.CircleShape.resizeByPercentage(double) : void
			pattern.bridge.CircleShape.x
			pattern.bridge.CircleShape.y
			pattern.bridge.DrawingAPI
			pattern.bridge.DrawingAPI.drawCircle(double, double, double) : void
			pattern.bridge.DrawingAPI1
			pattern.bridge.DrawingAPI1.<init>() : void
			pattern.bridge.DrawingAPI1.drawCircle(double, double, double) : void
			pattern.bridge.DrawingAPI2
			pattern.bridge.DrawingAPI2.<init>() : void
			pattern.bridge.DrawingAPI2.drawCircle(double, double, double) : void
			pattern.bridge.Shape
			pattern.bridge.Shape.<init>(pattern.bridge.DrawingAPI) : void
			pattern.bridge.Shape.draw() : void
			pattern.bridge.Shape.drawingAPI
			pattern.bridge.Shape.resizeByPercentage(double) : void
		]
		[
			pattern.builder.Pizza
			pattern.builder.Pizza.<init>(pattern.builder.PizzaBuilder) : void
			pattern.builder.Pizza.dough
			pattern.builder.Pizza.getDough() : java.lang.String
			pattern.builder.Pizza.getSauce() : java.lang.String
			pattern.builder.Pizza.getTopping() : java.lang.String
			pattern.builder.Pizza.sauce
			pattern.builder.Pizza.topping
			pattern.builder.Pizza.toString() : java.lang.String
			pattern.builder.PizzaBuilder
			pattern.builder.PizzaBuilder.<init>() : void
			pattern.builder.PizzaBuilder.build() : pattern.builder.Pizza
			pattern.builder.PizzaBuilder.dough
			pattern.builder.PizzaBuilder.getDough() : java.lang.String
			pattern.builder.PizzaBuilder.getSauce() : java.lang.String
			pattern.builder.PizzaBuilder.getTopping() : java.lang.String
			pattern.builder.PizzaBuilder.sauce
			pattern.builder.PizzaBuilder.setDough(java.lang.String) : pattern.builder.PizzaBuilder
			pattern.builder.PizzaBuilder.setSauce(java.lang.String) : pattern.builder.PizzaBuilder
			pattern.builder.PizzaBuilder.setTopping(java.lang.String) : pattern.builder.PizzaBuilder
			pattern.builder.PizzaBuilder.topping
			pattern.builder.PizzaBuilderExample
			pattern.builder.PizzaBuilderExample.<init>() : void
			pattern.builder.PizzaBuilderExample.main(java.lang.String[]) : void
		]
		[
			pattern.chainofresponsibility.example1.ChainOfResponsibilityExample
			pattern.chainofresponsibility.example1.ChainOfResponsibilityExample.<init>() : void
			pattern.chainofresponsibility.example1.ChainOfResponsibilityExample.main(java.lang.String[]) : void
			pattern.chainofresponsibility.example1.EmailLogger
			pattern.chainofresponsibility.example1.EmailLogger.<init>(int) : void
			pattern.chainofresponsibility.example1.EmailLogger.mask
			pattern.chainofresponsibility.example1.EmailLogger.writeMessage(java.lang.String) : void
			pattern.chainofresponsibility.example1.Logger
			pattern.chainofresponsibility.example1.Logger.<clinit>() : void
			pattern.chainofresponsibility.example1.Logger.<init>() : void
			pattern.chainofresponsibility.example1.Logger.DEBUG
			pattern.chainofresponsibility.example1.Logger.ERR
			pattern.chainofresponsibility.example1.Logger.mask
			pattern.chainofresponsibility.example1.Logger.message(java.lang.String, int) : void
			pattern.chainofresponsibility.example1.Logger.next
			pattern.chainofresponsibility.example1.Logger.NOTICE
			pattern.chainofresponsibility.example1.Logger.setNext(pattern.chainofresponsibility.example1.Logger) : pattern.chainofresponsibility.example1.Logger
			pattern.chainofresponsibility.example1.Logger.writeMessage(java.lang.String) : void
			pattern.chainofresponsibility.example1.StderrLogger
			pattern.chainofresponsibility.example1.StderrLogger.<init>(int) : void
			pattern.chainofresponsibility.example1.StderrLogger.mask
			pattern.chainofresponsibility.example1.StderrLogger.writeMessage(java.lang.String) : void
			pattern.chainofresponsibility.example1.StdoutLogger
			pattern.chainofresponsibility.example1.StdoutLogger.<init>(int) : void
			pattern.chainofresponsibility.example1.StdoutLogger.mask
			pattern.chainofresponsibility.example1.StdoutLogger.writeMessage(java.lang.String) : void
		]
		[
			pattern.chainofresponsibility.example2.CheckAuthority
			pattern.chainofresponsibility.example2.CheckAuthority.<init>() : void
			pattern.chainofresponsibility.example2.CheckAuthority.main(java.lang.String[]) : void
			pattern.chainofresponsibility.example2.DirectorPPower
			pattern.chainofresponsibility.example2.DirectorPPower.<init>() : void
			pattern.chainofresponsibility.example2.DirectorPPower.ALLOWABLE
			pattern.chainofresponsibility.example2.DirectorPPower.processRequest(pattern.chainofresponsibility.example2.PurchaseRequest) : void
			pattern.chainofresponsibility.example2.DirectorPPower.setSuccessor(pattern.chainofresponsibility.example2.PurchasePower) : void
			pattern.chainofresponsibility.example2.DirectorPPower.successor
			pattern.chainofresponsibility.example2.ManagerPPower
			pattern.chainofresponsibility.example2.ManagerPPower.<init>() : void
			pattern.chainofresponsibility.example2.ManagerPPower.ALLOWABLE
			pattern.chainofresponsibility.example2.ManagerPPower.processRequest(pattern.chainofresponsibility.example2.PurchaseRequest) : void
			pattern.chainofresponsibility.example2.ManagerPPower.setSuccessor(pattern.chainofresponsibility.example2.PurchasePower) : void
			pattern.chainofresponsibility.example2.ManagerPPower.successor
			pattern.chainofresponsibility.example2.PresidentPPower
			pattern.chainofresponsibility.example2.PresidentPPower.<init>() : void
			pattern.chainofresponsibility.example2.PresidentPPower.ALLOWABLE
			pattern.chainofresponsibility.example2.PresidentPPower.processRequest(pattern.chainofresponsibility.example2.PurchaseRequest) : void
			pattern.chainofresponsibility.example2.PurchasePower
			pattern.chainofresponsibility.example2.PurchasePower.<init>() : void
			pattern.chainofresponsibility.example2.PurchasePower.base
			pattern.chainofresponsibility.example2.PurchasePower.processRequest(pattern.chainofresponsibility.example2.PurchaseRequest) : void
			pattern.chainofresponsibility.example2.PurchasePower.setSuccessor(pattern.chainofresponsibility.example2.PurchasePower) : void
			pattern.chainofresponsibility.example2.PurchasePower.successor
			pattern.chainofresponsibility.example2.PurchaseRequest
			pattern.chainofresponsibility.example2.PurchaseRequest.<init>(int, double, java.lang.String) : void
			pattern.chainofresponsibility.example2.PurchaseRequest.amount
			pattern.chainofresponsibility.example2.PurchaseRequest.getAmount() : double
			pattern.chainofresponsibility.example2.PurchaseRequest.getNumber() : int
			pattern.chainofresponsibility.example2.PurchaseRequest.getPurpose() : java.lang.String
			pattern.chainofresponsibility.example2.PurchaseRequest.number
			pattern.chainofresponsibility.example2.PurchaseRequest.purpose
			pattern.chainofresponsibility.example2.PurchaseRequest.setAmount(double) : void
			pattern.chainofresponsibility.example2.PurchaseRequest.setNumber(int) : void
			pattern.chainofresponsibility.example2.PurchaseRequest.setPurpose(java.lang.String) : void
			pattern.chainofresponsibility.example2.VicePresidentPPower
			pattern.chainofresponsibility.example2.VicePresidentPPower.<init>() : void
			pattern.chainofresponsibility.example2.VicePresidentPPower.ALLOWABLE
			pattern.chainofresponsibility.example2.VicePresidentPPower.processRequest(pattern.chainofresponsibility.example2.PurchaseRequest) : void
			pattern.chainofresponsibility.example2.VicePresidentPPower.setSuccessor(pattern.chainofresponsibility.example2.PurchasePower) : void
			pattern.chainofresponsibility.example2.VicePresidentPPower.successor
		]
		[
			pattern.command.Command
			pattern.command.Command.execute() : void
			pattern.command.FlipDownCommand
			pattern.command.FlipDownCommand.<init>(pattern.command.Light) : void
			pattern.command.FlipDownCommand.execute() : void
			pattern.command.FlipDownCommand.theLight
			pattern.command.FlipUpCommand
			pattern.command.FlipUpCommand.<init>(pattern.command.Light) : void
			pattern.command.FlipUpCommand.execute() : void
			pattern.command.FlipUpCommand.theLight
			pattern.command.Light
			pattern.command.Light.<init>() : void
			pattern.command.Light.turnOff() : void
			pattern.command.Light.turnOn() : void
			pattern.command.PressSwitch
			pattern.command.PressSwitch.<init>() : void
			pattern.command.PressSwitch.main(java.lang.String[]) : void
			pattern.command.Switch
			pattern.command.Switch.<init>() : void
			pattern.command.Switch.history
			pattern.command.Switch.storeAndExecute(pattern.command.Command) : void
		]
		[
			pattern.composite.CompositeGraphic
			pattern.composite.CompositeGraphic.<init>() : void
			pattern.composite.CompositeGraphic.add(pattern.composite.Graphic) : void
			pattern.composite.CompositeGraphic.mChildGraphics
			pattern.composite.CompositeGraphic.print() : void
			pattern.composite.CompositeGraphic.remove(pattern.composite.Graphic) : void
			pattern.composite.Ellipse
			pattern.composite.Ellipse.<init>() : void
			pattern.composite.Ellipse.print() : void
			pattern.composite.Graphic
			pattern.composite.Graphic.print() : void
			pattern.composite.Program
			pattern.composite.Program.<init>() : void
			pattern.composite.Program.main(java.lang.String[]) : void
		]
		[
			pattern.decorator.example1.DecoratedWindowTest
			pattern.decorator.example1.DecoratedWindowTest.<init>() : void
			pattern.decorator.example1.DecoratedWindowTest.main(java.lang.String[]) : void
			pattern.decorator.example1.HorizontalScrollBarDecorator
			pattern.decorator.example1.HorizontalScrollBarDecorator.<init>(pattern.decorator.example1.Window) : void
			pattern.decorator.example1.HorizontalScrollBarDecorator.decoratedWindow
			pattern.decorator.example1.HorizontalScrollBarDecorator.draw() : void
			pattern.decorator.example1.HorizontalScrollBarDecorator.drawHorizontalScrollBar() : void
			pattern.decorator.example1.HorizontalScrollBarDecorator.getDescription() : java.lang.String
			pattern.decorator.example1.SimpleWindow
			pattern.decorator.example1.SimpleWindow.<init>() : void
			pattern.decorator.example1.SimpleWindow.draw() : void
			pattern.decorator.example1.SimpleWindow.getDescription() : java.lang.String
			pattern.decorator.example1.VerticalScrollBarDecorator
			pattern.decorator.example1.VerticalScrollBarDecorator.<init>(pattern.decorator.example1.Window) : void
			pattern.decorator.example1.VerticalScrollBarDecorator.decoratedWindow
			pattern.decorator.example1.VerticalScrollBarDecorator.draw() : void
			pattern.decorator.example1.VerticalScrollBarDecorator.drawVerticalScrollBar() : void
			pattern.decorator.example1.VerticalScrollBarDecorator.getDescription() : java.lang.String
			pattern.decorator.example1.Window
			pattern.decorator.example1.Window.draw() : void
			pattern.decorator.example1.Window.getDescription() : java.lang.String
			pattern.decorator.example1.WindowDecorator
			pattern.decorator.example1.WindowDecorator.<init>(pattern.decorator.example1.Window) : void
			pattern.decorator.example1.WindowDecorator.decoratedWindow
			pattern.decorator.example1.WindowDecorator.draw() : void
		]
		[
			pattern.decorator.example2.Coffee
			pattern.decorator.example2.Coffee.getCost() : double
			pattern.decorator.example2.Coffee.getIngredients() : java.lang.String
			pattern.decorator.example2.CoffeeDecorator
			pattern.decorator.example2.CoffeeDecorator.<init>(pattern.decorator.example2.Coffee) : void
			pattern.decorator.example2.CoffeeDecorator.decoratedCoffee
			pattern.decorator.example2.CoffeeDecorator.getCost() : double
			pattern.decorator.example2.CoffeeDecorator.getIngredients() : java.lang.String
			pattern.decorator.example2.CoffeeDecorator.ingredientSeparator
			pattern.decorator.example2.CoffeeMain
			pattern.decorator.example2.CoffeeMain.<init>() : void
			pattern.decorator.example2.CoffeeMain.main(java.lang.String[]) : void
			pattern.decorator.example2.Milk
			pattern.decorator.example2.Milk.<init>(pattern.decorator.example2.Coffee) : void
			pattern.decorator.example2.Milk.getCost() : double
			pattern.decorator.example2.Milk.getIngredients() : java.lang.String
			pattern.decorator.example2.Milk.ingredientSeparator
			pattern.decorator.example2.SimpleCoffee
			pattern.decorator.example2.SimpleCoffee.<init>() : void
			pattern.decorator.example2.SimpleCoffee.getCost() : double
			pattern.decorator.example2.SimpleCoffee.getIngredients() : java.lang.String
			pattern.decorator.example2.Sprinkles
			pattern.decorator.example2.Sprinkles.<init>(pattern.decorator.example2.Coffee) : void
			pattern.decorator.example2.Sprinkles.getCost() : double
			pattern.decorator.example2.Sprinkles.getIngredients() : java.lang.String
			pattern.decorator.example2.Sprinkles.ingredientSeparator
			pattern.decorator.example2.Whip
			pattern.decorator.example2.Whip.<init>(pattern.decorator.example2.Coffee) : void
			pattern.decorator.example2.Whip.getCost() : double
			pattern.decorator.example2.Whip.getIngredients() : java.lang.String
			pattern.decorator.example2.Whip.ingredientSeparator
		]
		[
			pattern.facade.Computer
			pattern.facade.Computer.<init>() : void
			pattern.facade.Computer.BOOT_ADDRESS
			pattern.facade.Computer.BOOT_SECTOR
			pattern.facade.Computer.cpu
			pattern.facade.Computer.hardDrive
			pattern.facade.Computer.memory
			pattern.facade.Computer.SECTOR_SIZE
			pattern.facade.Computer.startComputer() : void
			pattern.facade.CPU
			pattern.facade.CPU.<init>() : void
			pattern.facade.CPU.execute() : void
			pattern.facade.CPU.freeze() : void
			pattern.facade.CPU.jump(long) : void
			pattern.facade.HardDrive
			pattern.facade.HardDrive.<init>() : void
			pattern.facade.HardDrive.read(long, int) : byte[]
			pattern.facade.Memory
			pattern.facade.Memory.<init>() : void
			pattern.facade.Memory.load(long, byte[]) : void
			pattern.facade.You
			pattern.facade.You.<init>() : void
			pattern.facade.You.main(java.lang.String[]) : void
		]
		[
			pattern.factorymethod.MagicMazeGame
			pattern.factorymethod.MagicMazeGame.<init>() : void
			pattern.factorymethod.MagicMazeGame.makeRoom() : pattern.factorymethod.Room
			pattern.factorymethod.MagicRoom
			pattern.factorymethod.MagicRoom.<init>() : void
			pattern.factorymethod.MagicRoom.connect(pattern.factorymethod.Room) : void
			pattern.factorymethod.MazeGame
			pattern.factorymethod.MazeGame.<init>() : void
			pattern.factorymethod.MazeGame.addRoom(pattern.factorymethod.Room) : void
			pattern.factorymethod.MazeGame.makeRoom() : pattern.factorymethod.Room
			pattern.factorymethod.OrdinaryRoom
			pattern.factorymethod.OrdinaryRoom.<init>() : void
			pattern.factorymethod.OrdinaryRoom.connect(pattern.factorymethod.Room) : void
			pattern.factorymethod.Room
			pattern.factorymethod.Room.connect(pattern.factorymethod.Room) : void
		]
		[
			pattern.flyweight.CoffeeFlavor
			pattern.flyweight.CoffeeFlavor.<init>(java.lang.String) : void
			pattern.flyweight.CoffeeFlavor.flavor
			pattern.flyweight.CoffeeFlavor.getFlavor() : java.lang.String
			pattern.flyweight.CoffeeFlavor.serveCoffee(pattern.flyweight.CoffeeOrderContext) : void
			pattern.flyweight.CoffeeFlavorFactory
			pattern.flyweight.CoffeeFlavorFactory.<init>() : void
			pattern.flyweight.CoffeeFlavorFactory.flavors
			pattern.flyweight.CoffeeFlavorFactory.getCoffeeFlavor(java.lang.String) : pattern.flyweight.CoffeeFlavor
			pattern.flyweight.CoffeeFlavorFactory.getTotalCoffeeFlavorsMade() : int
			pattern.flyweight.CoffeeOrder
			pattern.flyweight.CoffeeOrder.serveCoffee(pattern.flyweight.CoffeeOrderContext) : void
			pattern.flyweight.CoffeeOrderContext
			pattern.flyweight.CoffeeOrderContext.<init>(int) : void
			pattern.flyweight.CoffeeOrderContext.getTable() : int
			pattern.flyweight.CoffeeOrderContext.tableNumber
			pattern.flyweight.TestFlyweight
			pattern.flyweight.TestFlyweight.<clinit>() : void
			pattern.flyweight.TestFlyweight.<init>() : void
			pattern.flyweight.TestFlyweight.flavorFactory
			pattern.flyweight.TestFlyweight.flavors
			pattern.flyweight.TestFlyweight.main(java.lang.String[]) : void
			pattern.flyweight.TestFlyweight.ordersMade
			pattern.flyweight.TestFlyweight.tables
			pattern.flyweight.TestFlyweight.takeOrders(java.lang.String, int) : void
		]
		[
			pattern.interpreter.Evaluator
			pattern.interpreter.Evaluator.<init>(java.lang.String) : void
			pattern.interpreter.Evaluator.interpret(java.util.Map) : int
			pattern.interpreter.Evaluator.syntaxTree
			pattern.interpreter.Expression
			pattern.interpreter.Expression.interpret(java.util.Map) : int
			pattern.interpreter.InterpreterExample
			pattern.interpreter.InterpreterExample.<init>() : void
			pattern.interpreter.InterpreterExample.main(java.lang.String[]) : void
			pattern.interpreter.Minus
			pattern.interpreter.Minus.<init>(pattern.interpreter.Expression, pattern.interpreter.Expression) : void
			pattern.interpreter.Minus.interpret(java.util.Map) : int
			pattern.interpreter.Minus.leftOperand
			pattern.interpreter.Minus.rightOperand
			pattern.interpreter.Number
			pattern.interpreter.Number.<init>(int) : void
			pattern.interpreter.Number.interpret(java.util.Map) : int
			pattern.interpreter.Number.number
			pattern.interpreter.Plus
			pattern.interpreter.Plus.<init>(pattern.interpreter.Expression, pattern.interpreter.Expression) : void
			pattern.interpreter.Plus.interpret(java.util.Map) : int
			pattern.interpreter.Plus.leftOperand
			pattern.interpreter.Plus.rightOperand
			pattern.interpreter.Variable
			pattern.interpreter.Variable.<init>(java.lang.String) : void
			pattern.interpreter.Variable.interpret(java.util.Map) : int
			pattern.interpreter.Variable.name
		]
		[
			pattern.iterator.Aggregate
			pattern.iterator.Aggregate.getIterator() : pattern.iterator.Iterator
			pattern.iterator.ConcreteAggregate
			pattern.iterator.ConcreteAggregate.<init>(java.util.List) : void
			pattern.iterator.ConcreteAggregate.getIterator() : pattern.iterator.Iterator
			pattern.iterator.ConcreteAggregate.list
			pattern.iterator.ConcreteIterator
			pattern.iterator.ConcreteIterator.<init>(pattern.iterator.ConcreteAggregate) : void
			pattern.iterator.ConcreteIterator.currentPos
			pattern.iterator.ConcreteIterator.hasNext() : boolean
			pattern.iterator.ConcreteIterator.list
			pattern.iterator.ConcreteIterator.next() : java.lang.Integer
			pattern.iterator.ConcreteIterator.next() : java.lang.Object
			pattern.iterator.Iterator
			pattern.iterator.Iterator.hasNext() : boolean
			pattern.iterator.Iterator.next() : java.lang.Object
			pattern.iterator.IteratorDemo
			pattern.iterator.IteratorDemo.<init>() : void
			pattern.iterator.IteratorDemo.main(java.lang.String[]) : void
		]
		[
			pattern.mediator.BtnBook
			pattern.mediator.BtnBook.<init>(java.awt.event.ActionListener, pattern.mediator.IMediator) : void
			pattern.mediator.BtnBook.addActionListener(java.awt.event.ActionListener) : void
			pattern.mediator.BtnBook.execute() : void
			pattern.mediator.BtnBook.med
			pattern.mediator.BtnBook.serialVersionUID
			pattern.mediator.BtnBook.setEnabled(boolean) : void
			pattern.mediator.BtnSearch
			pattern.mediator.BtnSearch.<init>(java.awt.event.ActionListener, pattern.mediator.IMediator) : void
			pattern.mediator.BtnSearch.addActionListener(java.awt.event.ActionListener) : void
			pattern.mediator.BtnSearch.execute() : void
			pattern.mediator.BtnSearch.med
			pattern.mediator.BtnSearch.serialVersionUID
			pattern.mediator.BtnSearch.setEnabled(boolean) : void
			pattern.mediator.BtnView
			pattern.mediator.BtnView.<init>(java.awt.event.ActionListener, pattern.mediator.IMediator) : void
			pattern.mediator.BtnView.addActionListener(java.awt.event.ActionListener) : void
			pattern.mediator.BtnView.execute() : void
			pattern.mediator.BtnView.med
			pattern.mediator.BtnView.serialVersionUID
			pattern.mediator.BtnView.setEnabled(boolean) : void
			pattern.mediator.Command
			pattern.mediator.Command.execute() : void
			pattern.mediator.IMediator
			pattern.mediator.IMediator.book() : void
			pattern.mediator.IMediator.registerBook(pattern.mediator.BtnBook) : void
			pattern.mediator.IMediator.registerDisplay(pattern.mediator.LblDisplay) : void
			pattern.mediator.IMediator.registerSearch(pattern.mediator.BtnSearch) : void
			pattern.mediator.IMediator.registerView(pattern.mediator.BtnView) : void
			pattern.mediator.IMediator.search() : void
			pattern.mediator.IMediator.view() : void
			pattern.mediator.LblDisplay
			pattern.mediator.LblDisplay.<init>(pattern.mediator.IMediator) : void
			pattern.mediator.LblDisplay.med
			pattern.mediator.LblDisplay.serialVersionUID
			pattern.mediator.LblDisplay.setFont(java.awt.Font) : void
			pattern.mediator.LblDisplay.setText(java.lang.String) : void
			pattern.mediator.Mediator
			pattern.mediator.Mediator.<init>() : void
			pattern.mediator.Mediator.book() : void
			pattern.mediator.Mediator.btnBook
			pattern.mediator.Mediator.btnSearch
			pattern.mediator.Mediator.btnView
			pattern.mediator.Mediator.registerBook(pattern.mediator.BtnBook) : void
			pattern.mediator.Mediator.registerDisplay(pattern.mediator.LblDisplay) : void
			pattern.mediator.Mediator.registerSearch(pattern.mediator.BtnSearch) : void
			pattern.mediator.Mediator.registerView(pattern.mediator.BtnView) : void
			pattern.mediator.Mediator.search() : void
			pattern.mediator.Mediator.show
			pattern.mediator.Mediator.view() : void
			pattern.mediator.MediatorDemo
			pattern.mediator.MediatorDemo.<init>() : void
			pattern.mediator.MediatorDemo.actionPerformed(java.awt.event.ActionEvent) : void
			pattern.mediator.MediatorDemo.getContentPane() : java.awt.Container
			pattern.mediator.MediatorDemo.main(java.lang.String[]) : void
			pattern.mediator.MediatorDemo.med
			pattern.mediator.MediatorDemo.serialVersionUID
			pattern.mediator.MediatorDemo.setSize(int, int) : void
			pattern.mediator.MediatorDemo.setVisible(boolean) : void
		]
		[
			pattern.memento.Caretaker
			pattern.memento.Caretaker.<init>() : void
			pattern.memento.Caretaker.main(java.lang.String[]) : void
			pattern.memento.Originator
			pattern.memento.Originator$1
			pattern.memento.Originator$Memento
			pattern.memento.Originator$Memento.<init>(java.lang.String) : void
			pattern.memento.Originator$Memento.<init>(java.lang.String, pattern.memento.Originator$1) : void
			pattern.memento.Originator$Memento.access$100(pattern.memento.Originator$Memento) : java.lang.String
			pattern.memento.Originator$Memento.getSavedState() : java.lang.String
			pattern.memento.Originator$Memento.state
			pattern.memento.Originator.<init>() : void
			pattern.memento.Originator.restoreFromMemento(pattern.memento.Originator$Memento) : void
			pattern.memento.Originator.saveToMemento() : pattern.memento.Originator$Memento
			pattern.memento.Originator.set(java.lang.String) : void
			pattern.memento.Originator.state
		]
		[
			pattern.observer.EventSource
			pattern.observer.EventSource.<init>() : void
			pattern.observer.EventSource.addObserver(java.util.Observer) : void
			pattern.observer.EventSource.notifyObservers(java.lang.Object) : void
			pattern.observer.EventSource.run() : void
			pattern.observer.EventSource.setChanged() : void
			pattern.observer.MyApp
			pattern.observer.MyApp.<init>() : void
			pattern.observer.MyApp.main(java.lang.String[]) : void
			pattern.observer.ResponseHandler
			pattern.observer.ResponseHandler.<init>() : void
			pattern.observer.ResponseHandler.resp
			pattern.observer.ResponseHandler.update(java.util.Observable, java.lang.Object) : void
		]
		[
			pattern.prototype.Prototype
			pattern.prototype.Prototype.<init>() : void
			pattern.prototype.Prototype.clone() : java.lang.Object
			pattern.prototype.Prototype.getX() : int
			pattern.prototype.Prototype.printX() : void
			pattern.prototype.Prototype.setX(int) : void
			pattern.prototype.PrototypeImpl
			pattern.prototype.PrototypeImpl.<init>(int) : void
			pattern.prototype.PrototypeImpl.getX() : int
			pattern.prototype.PrototypeImpl.printX() : void
			pattern.prototype.PrototypeImpl.setX(int) : void
			pattern.prototype.PrototypeImpl.x
			pattern.prototype.PrototypeTest
			pattern.prototype.PrototypeTest.<init>() : void
			pattern.prototype.PrototypeTest.main(java.lang.String[]) : void
		]
		[
			pattern.proxy.Image
			pattern.proxy.Image.displayImage() : void
			pattern.proxy.ProxyExample
			pattern.proxy.ProxyExample.<init>() : void
			pattern.proxy.ProxyExample.main(java.lang.String[]) : void
			pattern.proxy.ProxyImage
			pattern.proxy.ProxyImage.<init>(java.lang.String) : void
			pattern.proxy.ProxyImage.displayImage() : void
			pattern.proxy.ProxyImage.filename
			pattern.proxy.ProxyImage.image
			pattern.proxy.RealImage
			pattern.proxy.RealImage.<init>(java.lang.String) : void
			pattern.proxy.RealImage.displayImage() : void
			pattern.proxy.RealImage.filename
			pattern.proxy.RealImage.loadImageFromDisk() : void
		]
		[
			pattern.singleton.BillPughSingleton
			pattern.singleton.BillPughSingleton$1
			pattern.singleton.BillPughSingleton$BillPughSingletonHolder
			pattern.singleton.BillPughSingleton$BillPughSingletonHolder.<clinit>() : void
			pattern.singleton.BillPughSingleton$BillPughSingletonHolder.<init>() : void
			pattern.singleton.BillPughSingleton$BillPughSingletonHolder.instance
			pattern.singleton.BillPughSingleton.<init>() : void
			pattern.singleton.BillPughSingleton.<init>(pattern.singleton.BillPughSingleton$1) : void
			pattern.singleton.BillPughSingleton.getInstance() : pattern.singleton.BillPughSingleton
			pattern.singleton.LazySingleton
			pattern.singleton.LazySingleton.<init>() : void
			pattern.singleton.LazySingleton._instance
			pattern.singleton.LazySingleton.getInstance() : pattern.singleton.LazySingleton
			pattern.singleton.TraditionalSingleton
			pattern.singleton.TraditionalSingleton.<clinit>() : void
			pattern.singleton.TraditionalSingleton.<init>() : void
			pattern.singleton.TraditionalSingleton.getInstance() : pattern.singleton.TraditionalSingleton
			pattern.singleton.TraditionalSingleton.instance
		]
		[
			pattern.state.State
			pattern.state.State.writeName(pattern.state.StateContext, java.lang.String) : void
			pattern.state.StateA
			pattern.state.StateA.<init>() : void
			pattern.state.StateA.writeName(pattern.state.StateContext, java.lang.String) : void
			pattern.state.StateB
			pattern.state.StateB.<init>() : void
			pattern.state.StateB.count
			pattern.state.StateB.writeName(pattern.state.StateContext, java.lang.String) : void
			pattern.state.StateContext
			pattern.state.StateContext.<init>() : void
			pattern.state.StateContext.myState
			pattern.state.StateContext.setState(pattern.state.State) : void
			pattern.state.StateContext.writeName(java.lang.String) : void
			pattern.state.TestClientState
			pattern.state.TestClientState.<init>() : void
			pattern.state.TestClientState.main(java.lang.String[]) : void
		]
		[
			pattern.strategy.ConcreteStrategyAdd
			pattern.strategy.ConcreteStrategyAdd.<init>() : void
			pattern.strategy.ConcreteStrategyAdd.execute(int, int) : int
			pattern.strategy.ConcreteStrategyMultiply
			pattern.strategy.ConcreteStrategyMultiply.<init>() : void
			pattern.strategy.ConcreteStrategyMultiply.execute(int, int) : int
			pattern.strategy.ConcreteStrategySubtract
			pattern.strategy.ConcreteStrategySubtract.<init>() : void
			pattern.strategy.ConcreteStrategySubtract.execute(int, int) : int
			pattern.strategy.Context
			pattern.strategy.Context.<init>(pattern.strategy.Strategy) : void
			pattern.strategy.Context.executeStrategy(int, int) : int
			pattern.strategy.Context.strategy
			pattern.strategy.Strategy
			pattern.strategy.Strategy.execute(int, int) : int
			pattern.strategy.StrategyExample
			pattern.strategy.StrategyExample.<init>() : void
			pattern.strategy.StrategyExample.main(java.lang.String[]) : void
		]
		[
			pattern.templatemethod.Chess
			pattern.templatemethod.Chess.<init>() : void
			pattern.templatemethod.Chess.endOfGame() : boolean
			pattern.templatemethod.Chess.initializeGame() : void
			pattern.templatemethod.Chess.makePlay(int) : void
			pattern.templatemethod.Chess.printWinner() : void
			pattern.templatemethod.Game
			pattern.templatemethod.Game.<init>() : void
			pattern.templatemethod.Game.endOfGame() : boolean
			pattern.templatemethod.Game.initializeGame() : void
			pattern.templatemethod.Game.makePlay(int) : void
			pattern.templatemethod.Game.playersCount
			pattern.templatemethod.Game.playOneGame(int) : void
			pattern.templatemethod.Game.printWinner() : void
			pattern.templatemethod.Monopoly
			pattern.templatemethod.Monopoly.<init>() : void
			pattern.templatemethod.Monopoly.endOfGame() : boolean
			pattern.templatemethod.Monopoly.initializeGame() : void
			pattern.templatemethod.Monopoly.makePlay(int) : void
			pattern.templatemethod.Monopoly.printWinner() : void
		]
		[
			pattern.visitor.Body
			pattern.visitor.Body.<init>() : void
			pattern.visitor.Body.accept(pattern.visitor.CarElementVisitor) : void
			pattern.visitor.Car
			pattern.visitor.Car.<init>() : void
			pattern.visitor.Car.accept(pattern.visitor.CarElementVisitor) : void
			pattern.visitor.Car.elements
			pattern.visitor.Car.getElements() : pattern.visitor.CarElement[]
			pattern.visitor.CarElement
			pattern.visitor.CarElement.accept(pattern.visitor.CarElementVisitor) : void
			pattern.visitor.CarElement[].clone() : java.lang.Object
			pattern.visitor.CarElementDoVisitor
			pattern.visitor.CarElementDoVisitor.<init>() : void
			pattern.visitor.CarElementDoVisitor.visit(pattern.visitor.Body) : void
			pattern.visitor.CarElementDoVisitor.visit(pattern.visitor.Car) : void
			pattern.visitor.CarElementDoVisitor.visit(pattern.visitor.Engine) : void
			pattern.visitor.CarElementDoVisitor.visit(pattern.visitor.Wheel) : void
			pattern.visitor.CarElementPrintVisitor
			pattern.visitor.CarElementPrintVisitor.<init>() : void
			pattern.visitor.CarElementPrintVisitor.visit(pattern.visitor.Body) : void
			pattern.visitor.CarElementPrintVisitor.visit(pattern.visitor.Car) : void
			pattern.visitor.CarElementPrintVisitor.visit(pattern.visitor.Engine) : void
			pattern.visitor.CarElementPrintVisitor.visit(pattern.visitor.Wheel) : void
			pattern.visitor.CarElementVisitor
			pattern.visitor.CarElementVisitor.visit(pattern.visitor.Body) : void
			pattern.visitor.CarElementVisitor.visit(pattern.visitor.Car) : void
			pattern.visitor.CarElementVisitor.visit(pattern.visitor.Engine) : void
			pattern.visitor.CarElementVisitor.visit(pattern.visitor.Wheel) : void
			pattern.visitor.Engine
			pattern.visitor.Engine.<init>() : void
			pattern.visitor.Engine.accept(pattern.visitor.CarElementVisitor) : void
			pattern.visitor.VisitorDemo
			pattern.visitor.VisitorDemo.<init>() : void
			pattern.visitor.VisitorDemo.main(java.lang.String[]) : void
			pattern.visitor.Wheel
			pattern.visitor.Wheel.<init>(java.lang.String) : void
			pattern.visitor.Wheel.accept(pattern.visitor.CarElementVisitor) : void
			pattern.visitor.Wheel.getName() : java.lang.String
			pattern.visitor.Wheel.name
		]
		[
			pattern.visitor2.AssignmentNode
			pattern.visitor2.AssignmentNode.<init>() : void
			pattern.visitor2.AssignmentNode.accept(pattern.visitor2.NodeVisitor) : void
			pattern.visitor2.Client
			pattern.visitor2.Client.<init>() : void
			pattern.visitor2.CodeGeneratingVisitor
			pattern.visitor2.CodeGeneratingVisitor.<init>() : void
			pattern.visitor2.CodeGeneratingVisitor.visit(pattern.visitor2.AssignmentNode) : void
			pattern.visitor2.CodeGeneratingVisitor.visit(pattern.visitor2.VariableRefNode) : void
			pattern.visitor2.Node
			pattern.visitor2.Node.accept(pattern.visitor2.NodeVisitor) : void
			pattern.visitor2.NodeVisitor
			pattern.visitor2.NodeVisitor.visit(pattern.visitor2.AssignmentNode) : void
			pattern.visitor2.NodeVisitor.visit(pattern.visitor2.VariableRefNode) : void
			pattern.visitor2.TypeCheckingVisitor
			pattern.visitor2.TypeCheckingVisitor.<init>() : void
			pattern.visitor2.TypeCheckingVisitor.visit(pattern.visitor2.AssignmentNode) : void
			pattern.visitor2.TypeCheckingVisitor.visit(pattern.visitor2.VariableRefNode) : void
			pattern.visitor2.VariableRefNode
			pattern.visitor2.VariableRefNode.<init>() : void
			pattern.visitor2.VariableRefNode.accept(pattern.visitor2.NodeVisitor) : void
		]
		[
			test.GetterSetterTestClass
			test.GetterSetterTestClass.<init>() : void
			[
				test.GetterSetterTestClass.field
				test.GetterSetterTestClass.getField() : java.lang.Integer
				test.GetterSetterTestClass.setField(java.lang.Integer) : void
			]
			[
				test.GetterSetterTestClass.field2
				test.GetterSetterTestClass.getField2() : java.lang.String
				test.GetterSetterTestClass.setField2(java.lang.String) : void
			]
		]
		[
			test.StronglyConnectedComponentsTestClass
			test.StronglyConnectedComponentsTestClass.<init>() : void
			[
				test.StronglyConnectedComponentsTestClass.methodA() : void
				test.StronglyConnectedComponentsTestClass.methodB() : void
				test.StronglyConnectedComponentsTestClass.methodC() : void
			]
			test.StronglyConnectedComponentsTestClass.methodD() : void
		]
	]
	[
		[
			java.awt.Component
			java.awt.Container
			java.awt.Container.add(java.awt.Component, java.lang.Object) : void
			java.awt.event.ActionEvent
			java.awt.event.ActionEvent.getSource() : java.lang.Object
			java.awt.event.ActionListener
			java.awt.Font
			java.awt.Font.<init>(java.lang.String, int, int) : void
		]
		[
			java.io.BufferedReader
			java.io.BufferedReader.<init>(java.io.Reader) : void
			java.io.BufferedReader.readLine() : java.lang.String
			java.io.InputStream
			java.io.InputStreamReader
			java.io.InputStreamReader.<init>(java.io.InputStream) : void
			java.io.IOException
			java.io.IOException.printStackTrace() : void
			java.io.PrintStream
			java.io.PrintStream.print(java.lang.String) : void
			java.io.PrintStream.printf(java.lang.String, java.lang.Object[]) : java.io.PrintStream
			java.io.PrintStream.println(int) : void
			java.io.PrintStream.println(java.lang.Object) : void
			java.io.PrintStream.println(java.lang.String) : void
			java.io.Reader
		]
		[
			java.lang.Cloneable
			java.lang.CloneNotSupportedException
			java.lang.Double
			java.lang.Double.parseDouble(java.lang.String) : double
			java.lang.Double.valueOf(double) : java.lang.Double
			java.lang.Exception
			java.lang.Integer
			java.lang.Integer.<init>(int) : void
			java.lang.Object
			java.lang.Object.<init>() : void
			java.lang.Object.clone() : java.lang.Object
			java.lang.Runnable
			java.lang.String
			java.lang.String.equals(java.lang.Object) : boolean
			java.lang.String.equalsIgnoreCase(java.lang.String) : boolean
			java.lang.String.split(java.lang.String) : java.lang.String[]
			java.lang.String.toLowerCase() : java.lang.String
			java.lang.String.toUpperCase() : java.lang.String
			java.lang.StringBuilder
			java.lang.StringBuilder.<init>() : void
			java.lang.StringBuilder.append(double) : java.lang.StringBuilder
			java.lang.StringBuilder.append(int) : java.lang.StringBuilder
			java.lang.StringBuilder.append(java.lang.Object) : java.lang.StringBuilder
			java.lang.StringBuilder.append(java.lang.String) : java.lang.StringBuilder
			java.lang.StringBuilder.toString() : java.lang.String
			java.lang.System
			java.lang.System.err
			java.lang.System.exit(int) : void
			java.lang.System.in
			java.lang.System.out
			java.lang.Thread
			java.lang.Thread.<init>(java.lang.Runnable) : void
			java.lang.Thread.start() : void
		]
		[
			java.util.ArrayList
			java.util.ArrayList.<init>() : void
			java.util.Collections
			java.util.Collections.unmodifiableList(java.util.List) : java.util.List
			java.util.HashMap
			java.util.HashMap.<init>() : void
			java.util.Iterator
			java.util.Iterator.hasNext() : boolean
			java.util.Iterator.next() : java.lang.Object
			java.util.List
			java.util.List.add(java.lang.Object) : boolean
			java.util.List.get(int) : java.lang.Object
			java.util.List.iterator() : java.util.Iterator
			java.util.List.remove(java.lang.Object) : boolean
			java.util.List.size() : int
			java.util.Map
			java.util.Map.get(java.lang.Object) : java.lang.Object
			java.util.Map.put(java.lang.Object, java.lang.Object) : java.lang.Object
			java.util.Map.size() : int
			java.util.Observable
			java.util.Observable.<init>() : void
			java.util.Observer
			java.util.Stack
			java.util.Stack.<init>() : void
			java.util.Stack.pop() : java.lang.Object
			java.util.Stack.push(java.lang.Object) : java.lang.Object
		]
		[
			javax.swing.JButton
			javax.swing.JButton.<init>(java.lang.String) : void
			javax.swing.JFrame
			javax.swing.JFrame.<init>() : void
			javax.swing.JLabel
			javax.swing.JLabel.<init>(java.lang.String) : void
			javax.swing.JPanel
			javax.swing.JPanel.<init>() : void
			javax.swing.JPanel.add(java.awt.Component) : java.awt.Component
		]
	]
]